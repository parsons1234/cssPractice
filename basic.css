/* 改變文字的顏色 */

/*
//下方style＝"color:red;"的部分,這是對單個h2元素進行

<h2 style="color:red;">CatPhotoApp</h2> 

但有更好的方法應用css
*/


/* 
像這樣,這會讓所有h2元素呈現紅色

使用css選擇器設計樣式


<style>
h2 
{
    color: red; 
}

</style>
*/





/* 使用css 的class 來設計元素樣式 */

/*
class是可以重複使用的樣式 並且可以添加在html元素中

<h2 class="blue-text">CatPhotoApp</h2> class使用在html中

注意 class 在style中會以.開頭
<style>
  .blue-text {
    color: blue;
  }
</style>

*/


/* 使用一個css class 對多個元素進行樣式設計*/
/*
<style>
  .red-text {
    color: red;
  }
  
</style>

<h2 class="red-text">CatPhotoApp</h2>
<main>
  <p class="red-text">Click here to view more <a href="#">cat photos</a>.</p>
</main>
*/




/*    更改元素字體大小   */

/* 
將所有 p 元素 字體大小設為16px
 p{
    font-size:16px;
  }
*/



/*設定元素的字體*/
/*
可以透過 font-family設置元素要使用的字體
像是

h2 {
  font-family: sans-serif;  // 讓所有h2元素使用這個字體
}

*/

/*匯入google字型*/

/*
https://fonts.google.com 搜尋字型 點進去想要的以後  字型後面會有 select this style 

將該段程式碼連結貼入 html標籤的部分即可

在引用字型的時候記得 如果有有空格必須使用"" 例如 "Open Sans " ,Lobster就不用

＊記得font-family區分大小寫 

語法如下：

font-family: FAMILY_NAME, GENERIC_NAME;

GENERIC_NAME是其他文字不可使用時的替代字體

像這樣

p {
  font-family: Helvetica, sans-serif;
}

要注意的是通用字體（GENERIC_NAME）不分大小寫 也不需要引號 因為他們是css的關鍵字

<style>
  .red-text {
    color: red;
  }

  p {
    font-size: 16px;
    font-family: monospace;
  }
  h2{
    font-family:Lobster;
  }
</style>

<link rel="preconnect" href="https://fonts.gstatic.com"> //**********這行跟下面那行從google font複製的
<link href="https://fonts.googleapis.com/css2?family=Lobster&display=swap" rel="stylesheet"> 


<h2 class="red-text">CatPhotoApp</h2>
<main>
  <p class="red-text">Click here to view more <a href="#">cat photos</a>.</p>

  <a href="#"><img src="https://bit.ly/fcc-relaxing-cat" alt="A cute orange cat lying on its back."></a>

  <div>
    <p>Things cats love:</p>
    <ul>
      <li>cat nip</li>
      <li>laser pointers</li>
      <li>lasagna</li>
    </ul>
    <p>Top 3 things cats hate:</p>
    <ol>
      <li>flea treatment</li>
      <li>thunder</li>
      <li>other cats</li>
    </ol>
  </div>

  <form action="https://freecatphotoapp.com/submit-cat-photo">
    <label><input type="radio" name="indoor-outdoor" checked> Indoor</label>
    <label><input type="radio" name="indoor-outdoor"> Outdoor</label><br>
    <label><input type="checkbox" name="personality" checked> Loving</label>
    <label><input type="checkbox" name="personality"> Lazy</label>
    <label><input type="checkbox" name="personality"> Energetic</label><br>
    <input type="text" placeholder="cat photo URL" required>
    <button type="submit">Submit</button>
  </form>
</main>
*/


/* 調整圖片 */

/* 假設我們想讓class larger-image 的寬度為500px 

<style>

  .larger-image {
    width: 500px;
  }
</style>

*/


/* 在元素周圍通過邊框 */
/* css border 有樣式、顏色、寬度等屬性 */
/*
創建一個 紅色 寬度5像素的邊框
<style>
  .thin-red-border {
    border-color: red;
    border-width: 5px;
    border-style: solid;
  }
</style>

*/

/* ********************** 記得 ＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊*/

/*

可以在一個元素上使用多個class 用空格分開class名稱 

如下

<img class="class1 class2">

*/




/* 增加邊框半徑的圓角 */
/*

.thick-green-border
 {
    border-color: green;
    border-width: 10px;
    border-style: solid;
    border-radius:10px; //可以用border-radius 
  }
*/




/*除了px 還可以使用百分比來指定邊界半徑*/
/* border-radius:50%; */





/* 給予div 元素 背景色 */

/*

 .silver-background
  {
    background-color:silver;
  }

*/






/*  設定元素id  */

/*
--------------------------------------觀念----------------------------------------------------
使用id有幾個好處 可以通過id改變單個元素的樣式 在JS中可以透過id選擇和操作物件

記得 id是唯一的 雖然瀏覽器不強迫執行此規範 但這是被廣泛認可的，所以不要給多個元素設相同的id屬性


語法如下：

<h2 id="cat-photo-app">



*/





/*使用id屬性來設定元素樣式 */

/*
id不可重用，只能應用在一個元素上， 另外id 的優先級高於class 

若有元素同時擁有id 和class 設置樣式有衝突時 元素會優先應用id 

另外 class 在style中 是以.開頭

而在style中 id 是＃開頭

如下

#cat-photo-element {
  background-color: green;
}

*/


/*調整元素內邊距*/
/*

有三個重要的屬性控制每個html元素周圍的空間 padding border margin
padding 控制元素內容後邊框之間的空間

    .blue-box {
    background-color: blue;
    color: #fff;
    padding: 20px;
  }

*/





/* 調整元素外邊距 */

/*

margin 控制元素邊框和周圍元素之間的距離

 .blue-box {
    background-color: blue;
    color: #fff;
    padding: 20px;
    margin: 20px; //像這樣
  }




*/



/*為元素增加負外邊距*/

/*

margin 控制元素邊框和周圍元素之間的距離

若把margin設為負值元素就會變大

.blue-box {
    background-color: blue;
    color: #fff;
    padding: 20px;
    margin: -15px; //像這樣
  }
*/



/*
css 允許自定義元素 使元素擁有不同的padding

分別用padding-top、padding-right、padding-bottom和padding-left控制四個邊

.blue-box {
    background-color: blue;
    color: #fff;
    padding-top:40px;
    padding-left:40px;
    padding-right:20px;
    padding-bottom:20px;
  }

*/


/*
css也允許元素擁有不同的margin

分別為 margin-top, margin-right, margin-bottom, 和 margin-left 

 .blue-box {
    background-color: blue;
    color: #fff;
    margin-top:40px;
    margin-left:40px;
    margin-bottom:20px;
    margin-right:20px;
  }
*/




/*使用順時針方向指定元素的內邊距*/

/*

padding: 10px 20px 10px 20px; 上右下左
上下這兩行是一樣的意思
padding-top、padding-right、padding-bottom和padding-left


  .blue-box {
    background-color: blue;
    color: #fff;
    padding:40px 20px 20px 40px
  }





*/


/*同理，使用順時針方向指定元素的外邊距*/

/*

margin: 10px 20px 10px 20px; 上右下左
上下這兩行是一樣的意思
margin-top、margin-right、margin-bottom和margin-left


  .blue-box {
    background-color: blue;
    color: #fff;
    margin:40px 20px 20px 40px
  }





*/



/*  使用屬性選擇器設計元素樣式  */

/*

除了常用的id選擇器 和 class選擇器  還有其他css選取器

以下範例 所有type=checkbox的元素 改變了所有具有屬性類型和對應值為radio的元素的外邊距。
<style>
  [type='checkbox']
  {
    margin:10px 0px 15px 0px;
  }
</style>


 <label><input type="radio" name="indoor-outdoor" checked> Indoor</label>

   <form action="https://freecatphotoapp.com/submit-cat-photo" id="cat-photo-form">
    <label><input type="radio" name="indoor-outdoor" checked> Indoor</label>
    <label><input type="radio" name="indoor-outdoor"> Outdoor</label><br>
    <label><input type="checkbox" name="personality" checked> Loving</label>
    <label><input type="checkbox" name="personality"> Lazy</label>
    <label><input type="checkbox" name="personality"> Energetic</label><br>
    <input type="text" placeholder="cat photo URL" required>
    <button type="submit">Submit</button>
  </form>

*/






/*   理解絕對單位和相對單位   */

/*

在前面外邊距與內邊距用的是px的長度單位,告訴瀏覽器如何調整元素大小和空間大小

除了像素(px)之外還有其他長度單位 供我們使用

單位長度分為兩種 相對和絕對  

絕對單位長度會接近螢幕上實際測量的值 不過不同螢幕會存在解析度的差異，可能導致一些誤差

像是 in mm 分別代表英吋和毫米


相對單位長度像 em rem 他們會依賴其他長度的值 像em的大小就會基於元素字體的font-size值

如果使用em設置font-size的值 他的值會跟隨父元素的font-size值改變


＊＊＊＊＊＊有些單位長度選項是相對視窗大小來改變值的，符合rwd的設計原則





 .red-box {
    background-color: red;
    margin: 20px 40px 20px 40px;
    padding:1.5em //像這樣

  }

*/





/*         繼承主體元素的樣式    */
/*


每個html都有一個body元素

body也可以像其他元素一樣被設計樣式

其他元素也會繼承body元素的樣式

如下所示 雖然是設計body元素的css 但是h1也會套用這個效果 因為其他元素會繼承body元素的樣式

<style>
  body {
    background-color: black;
    color:green;
    font-family:monospace;
  }

</style>

<h1>Hello World</h1> 

*/




/*    樣式中的優先級   */

/*
有時候html元素的樣式會跟其他樣式發生衝突
像h1 不能同時擁有 color:green 和 color:pink


在下面的程式碼中 class 會覆蓋body的css樣式 會變成粉色


所以可以知道         *******  class的優先級高於繼承樣式   ********

 
<style>
  body {
    background-color: black;
    font-family: monospace;
    color: green;
   
  }
  .pink-text{
     color:pink;
  }
</style>
<h1 class="pink-text">Hello World!</h1>



*/


/*
html中 多個class的語法如下：

class="class1 class2"

html中 class 的順序不重要

但在style中 class的順序是重要的

後面的會蓋過前面的(就是會看最後一個宣告是什麼)

從以下的範例中可以知道    最後h1會變成藍色的

<style>
  body {
    background-color: black;
    font-family: monospace;
    color: green;
  }
  .pink-text {
    color: pink;
  }
  .blue-text{
    color:blue;
  }
</style>
<h1 class="pink-text blue-text">Hello World!</h1>

*/









/*   ID選擇器優先權高於class選擇器    */

/*
id 選擇器的語法

#brown-text {
  color: brown;
}

不用管在id宣告在pink-text 的上面或下面

因為id的優先權高於class

<style>

  body {
    background-color: black;
    font-family: monospace;
    color: green;
  }
  .pink-text {
    color: pink;
  }
  .blue-text {
    color: blue;
  }
  #orange-text{
    color:orange;
  }
</style>
<h1 id="orange-text" class="pink-text blue-text">Hello World!</h1>

*/






/* 用Inline覆蓋class樣式*/

/*


除了id選取器外 還有另外一種方式可以蓋過class樣式


就是使用Inline，語法如下：

<h1 style="color: green;">





h1的字是白色的   因為inline的優先級大於class

<style>
  body {
    background-color: black;
    font-family: monospace;
    color: green;
  }
  #orange-text {
    color: orange;
  }
  .pink-text {
    color: pink;
  }
  .blue-text {
    color: blue;
  }
</style>

<h1 style="color:white;"id="orange-text" class="pink-text blue-text">Hello World!</h1>

*/








/*             Important     的優先級最高*/

/*


當需要保證css樣式不受影響 可以使用Important關鍵字

語法如下

color: red !important;







範例（這會確保h1是粉紅色的）
<style>
  body {
    background-color: black;
    font-family: monospace;
    color: green;
  }
  #orange-text {
    color: orange;
  }
  .pink-text {
    color: pink !important;
  }
  .blue-text {
    color: blue;
  }
</style>
<h1 id="orange-text" class="pink-text blue-text" style="color: white">Hello World!</h1>


*/



/*    使用16進制色碼來表示特定的顏色    */


/*

body {
  color: #000000;
}


*/




/*               使用16進制混合顏色                 */

/*


6個16進制代表顏色 每兩個一組 分為 紅 綠 藍

#FFA500 <---橘色

0是16進制中最低的數字 代表沒有顏色
F是16進制中最高的數字 代表最大亮度




<style>
  .red-text {
    color: #FF0000;
  }
  .green-text {
    color: #00FF00;
  }
  .dodger-blue-text {
    color: #1E90FF;
  }
  .orange-text {
    color: #FFA500;
  }
</style>

<h1 class="red-text">I am red!</h1>

<h1 class="green-text">I am green!</h1>

<h1 class="dodger-blue-text">I am dodger blue!</h1>

<h1 class="orange-text">I am orange!</h1>

*/



/*              使用縮寫16進制         */

/*

瀏覽器將 #FF0000 跟 #F00視為一樣的 所以顏色會一樣

不過因為縮寫的關係會少4000種顏色


<style>
  .red-text {
    color: #F00;
  }
  .fuchsia-text {
    color: #F0F;
  }
  .cyan-text {
    color: #0FF;
  }
  .green-text {
    color: #0F0;
  }
</style>

<h1 class="red-text">I am red!</h1>

<h1 class="fuchsia-text">I am fuchsia!</h1>

<h1 class="cyan-text">I am cyan!</h1>

<h1 class="green-text">I am green!</h1>


*/




/*    RGB值用於color元素    */
/*
另一種呈現顏色的方法是用rgb值

例如： 黑色 rgb(0,0,0)

白色（255,255,255)

與16進制色碼不一樣的地方是16進制是用代表顏色

而RGB是用0~255代表顏色

那其實把16進制一種顏色＊兩個 最大16*16 就是256



body {
  background-color: rgb(255, 165, 0);   橘色

}

*/





/*               使用RGB混合顏色          */

/*

<style>
  .red-text {
    color: rgb(255,0,0);
  }
  .orchid-text {
    color: rgb(218,112,214);
  }
  .sienna-text {
    color: rgb(160,82,45);
  }
  .blue-text {
    color: rgb(0,0,255);
  }
</style>

<h1 class="red-text">I am red!</h1>

<h1 class="orchid-text">I am orchid!</h1>

<h1 class="sienna-text">I am sienna!</h1>

<h1 class="blue-text">I am blue!</h1>




*/


/*       創建css變數  */

/*

創建css變數前要在名字前面加-- 並賦值  如下：

--penguin-skin: gray;

現在其他元素可以透過該變數變成灰色

*/








/*              使用自定義的css變數      */

/*

  當創建變數後,可以通過使用變數的名字分配值值給其他css屬性
  
  語法如下：

  background: var(--penguin-skin);

  除非變數名完全匹配,否則不會改變樣式

*/





/*                   給css變數附加回退值        */

/*


當使用變數作為css屬性值時 可以在後面加一個備用值 當給定的變數無效 瀏覽器將回復該值

這不是用來增加瀏覽器的相容性 這在IE上不起作用


這個功用是當瀏覽器找不到變數時有一個顏色顯示

語法如下：

background: var(--penguin-skin, black);

當變數沒有設置的時候 這會將背景設為黑色 

這對debug有用


*/


/*                      繼承css變量               */

/*
當你創建一個變數 他可以在創建他的選擇器中使用 也可以在選擇器的子物件中使用

css變量是可以被繼承的 為了繼承性 通常css變數會被定義在元素中


：root 根目錄選取器 通過在:root中創建變數他就可以在全域中使用也可以從樣式表的任何選擇器訪問

root 顧名思義就是「根」的意思，網頁的「根」指的就是 <html>

<style>
  :root {
  
    --penguin-belly:pink;   //：root在這
 
  }

  body {
    background: var(--penguin-belly, #c6faf1);
  }

  .penguin {
    --penguin-skin: gray;
    --penguin-beak: orange;
    position: relative;
    margin: auto;
    display: block;
    margin-top: 5%;
    width: 300px;
    height: 300px;
  }

  .right-cheek {
    top: 15%;
    left: 35%;
    background: var(--penguin-belly, white);
    width: 60%;
    height: 70%;
    border-radius: 70% 70% 60% 60%;
  }

  .left-cheek {
    top: 15%;
    left: 5%;
    background: var(--penguin-belly, white);
    width: 60%;
    height: 70%;
    border-radius: 70% 70% 60% 60%;
  }

  .belly {
    top: 60%;
    left: 2.5%;
    background: var(--penguin-belly, white);
    width: 95%;
    height: 100%;
    border-radius: 120% 120% 100% 100%;
  }

  .penguin-top {
    top: 10%;
    left: 25%;
    background: var(--penguin-skin, gray);
    width: 50%;
    height: 45%;
    border-radius: 70% 70% 60% 60%;
  }

  .penguin-bottom {
    top: 40%;
    left: 23.5%;
    background: var(--penguin-skin, gray);
    width: 53%;
    height: 45%;
    border-radius: 70% 70% 100% 100%;
  }

  .right-hand {
    top: 0%;
    left: -5%;
    background: var(--penguin-skin, gray);
    width: 30%;
    height: 60%;
    border-radius: 30% 30% 120% 30%;
    transform: rotate(45deg);
    z-index: -1;
  }

  .left-hand {
    top: 0%;
    left: 75%;
    background: var(--penguin-skin, gray);
    width: 30%;
    height: 60%;
    border-radius: 30% 30% 30% 120%;
    transform: rotate(-45deg);
    z-index: -1;
  }

  .right-feet {
    top: 85%;
    left: 60%;
    background: var(--penguin-beak, orange);
    width: 15%;
    height: 30%;
    border-radius: 50% 50% 50% 50%;
    transform: rotate(-80deg);
    z-index: -2222;
  }

  .left-feet {
    top: 85%;
    left: 25%;
    background: var(--penguin-beak, orange);
    width: 15%;
    height: 30%;
    border-radius: 50% 50% 50% 50%;
    transform: rotate(80deg);
    z-index: -2222;
  }

  .right-eye {
    top: 45%;
    left: 60%;
    background: black;
    width: 15%;
    height: 17%;
    border-radius: 50%;
  }

  .left-eye {
    top: 45%;
    left: 25%;
    background: black;
    width: 15%;
    height: 17%;
    border-radius: 50%;
  }

  .sparkle {
    top: 25%;
    left: 15%;
    background: white;
    width: 35%;
    height: 35%;
    border-radius: 50%;
  }

  .blush-right {
    top: 65%;
    left: 15%;
    background: pink;
    width: 15%;
    height: 10%;
    border-radius: 50%;
  }

  .blush-left {
    top: 65%;
    left: 70%;
    background: pink;
    width: 15%;
    height: 10%;
    border-radius: 50%;
  }

  .beak-top {
    top: 60%;
    left: 40%;
    background: var(--penguin-beak, orange);
    width: 20%;
    height: 10%;
    border-radius: 50%;
  }

  .beak-bottom {
    top: 65%;
    left: 42%;
    background: var(--penguin-beak, orange);
    width: 16%;
    height: 10%;
    border-radius: 50%;
  }

  .penguin * {
    position: absolute;
  }
</style>
<div class="penguin">
  <div class="penguin-bottom">
    <div class="right-hand"></div>
    <div class="left-hand"></div>
    <div class="right-feet"></div>
    <div class="left-feet"></div>
  </div>
  <div class="penguin-top">
    <div class="right-cheek"></div>
    <div class="left-cheek"></div>
    <div class="belly"></div>
    <div class="right-eye">
      <div class="sparkle"></div>
    </div>
    <div class="left-eye">
      <div class="sparkle"></div>
    </div>
    <div class="blush-right"></div>
    <div class="blush-left"></div>
    <div class="beak-top"></div>
    <div class="beak-bottom"></div>
  </div>
</div>


*/



/*          更改特定區域的變數       */

/*
  當在:root建立變數後  變數在整個頁面都是可用的


  若在其他元素中在建立一次變數 會覆寫:root本來的值 （這個元素可以客製化的意思）

例如：root的值是black 在你想要改變的那個變數下在建立一次變數白色 那這個元素就會是白色

<style>
  :root {
    --penguin-skin: gray;
    --penguin-belly: pink;
    --penguin-beak: orange;
  }

  body {
    background: var(--penguin-belly, #c6faf1);
  }

  .penguin {

   --penguin-belly:white;           //這邊

    position: relative;
    margin: auto;
    display: block;
    margin-top: 5%;
    width: 300px;
    height: 300px;
  }

  .right-cheek {
    top: 15%;
    left: 35%;
    background: var(--penguin-belly, pink);
    width: 60%;
    height: 70%;
    border-radius: 70% 70% 60% 60%;
  }

  .left-cheek {
    top: 15%;
    left: 5%;
    background: var(--penguin-belly, pink);
    width: 60%;
    height: 70%;
    border-radius: 70% 70% 60% 60%;
  }

  .belly {
    top: 60%;
    left: 2.5%;
    background: var(--penguin-belly, pink);
    width: 95%;
    height: 100%;
    border-radius: 120% 120% 100% 100%;
  }

  .penguin-top {
    top: 10%;
    left: 25%;
    background: var(--penguin-skin, gray);
    width: 50%;
    height: 45%;
    border-radius: 70% 70% 60% 60%;
  }

  .penguin-bottom {
    top: 40%;
    left: 23.5%;
    background: var(--penguin-skin, gray);
    width: 53%;
    height: 45%;
    border-radius: 70% 70% 100% 100%;
  }

  .right-hand {
    top: 0%;
    left: -5%;
    background: var(--penguin-skin, gray);
    width: 30%;
    height: 60%;
    border-radius: 30% 30% 120% 30%;
    transform: rotate(45deg);
    z-index: -1;
  }

  .left-hand {
    top: 0%;
    left: 75%;
    background: var(--penguin-skin, gray);
    width: 30%;
    height: 60%;
    border-radius: 30% 30% 30% 120%;
    transform: rotate(-45deg);
    z-index: -1;
  }

  .right-feet {
    top: 85%;
    left: 60%;
    background: var(--penguin-beak, orange);
    width: 15%;
    height: 30%;
    border-radius: 50% 50% 50% 50%;
    transform: rotate(-80deg);
    z-index: -2222;
  }

  .left-feet {
    top: 85%;
    left: 25%;
    background: var(--penguin-beak, orange);
    width: 15%;
    height: 30%;
    border-radius: 50% 50% 50% 50%;
    transform: rotate(80deg);
    z-index: -2222;
  }

  .right-eye {
    top: 45%;
    left: 60%;
    background: black;
    width: 15%;
    height: 17%;
    border-radius: 50%;
  }

  .left-eye {
    top: 45%;
    left: 25%;
    background: black;
    width: 15%;
    height: 17%;
    border-radius: 50%;
  }

  .sparkle {
    top: 25%;
    left: 15%;
    background: white;
    width: 35%;
    height: 35%;
    border-radius: 50%;
  }

  .blush-right {
    top: 65%;
    left: 15%;
    background: pink;
    width: 15%;
    height: 10%;
    border-radius: 50%;
  }

  .blush-left {
    top: 65%;
    left: 70%;
    background: pink;
    width: 15%;
    height: 10%;
    border-radius: 50%;
  }

  .beak-top {
    top: 60%;
    left: 40%;
    background: var(--penguin-beak, orange);
    width: 20%;
    height: 10%;
    border-radius: 50%;
  }

  .beak-bottom {
    top: 65%;
    left: 42%;
    background: var(--penguin-beak, orange);
    width: 16%;
    height: 10%;
    border-radius: 50%;
  }

  .penguin * {
    position: absolute;
  }
</style>
<div class="penguin">
  <div class="penguin-bottom">
    <div class="right-hand"></div>
    <div class="left-hand"></div>
    <div class="right-feet"></div>
    <div class="left-feet"></div>
  </div>
  <div class="penguin-top">
    <div class="right-cheek"></div>
    <div class="left-cheek"></div>
    <div class="belly"></div>
    <div class="right-eye">
      <div class="sparkle"></div>
    </div>
    <div class="left-eye">
      <div class="sparkle"></div>
    </div>
    <div class="blush-right"></div>
    <div class="blush-left"></div>
    <div class="beak-top"></div>
    <div class="beak-bottom"></div>
  </div>
</div>

*/


/*              使用媒體查詢改變變數      */

/*

css變數可以簡化媒體查詢的方式

例如，當螢幕小於或大於媒體查詢所設定的值，

透過改變變數的值，那麼應用了變數的元素樣式都會得到響應修改。


<style>
  :root {
    --penguin-size: 300px;
    --penguin-skin: gray;
    --penguin-belly: white;
    --penguin-beak: orange;
  }

  @media (max-width: 350px) {     //新增了媒體查詢後 當縮小視窗 企鵝也會跟著變小
    :root {
    
      --penguin-size:200px;
      --penguin-skin:black;
  
    }
  }

  .penguin {
    position: relative;
    margin: auto;
    display: block;
    margin-top: 5%;
    width: var(--penguin-size, 300px);
    height: var(--penguin-size, 300px);
  }

  .right-cheek {
    top: 15%;
    left: 35%;
    background: var(--penguin-belly, white);
    width: 60%;
    height: 70%;
    border-radius: 70% 70% 60% 60%;
  }

  .left-cheek {
    top: 15%;
    left: 5%;
    background: var(--penguin-belly, white);
    width: 60%;
    height: 70%;
    border-radius: 70% 70% 60% 60%;
  }

  .belly {
    top: 60%;
    left: 2.5%;
    background: var(--penguin-belly, white);
    width: 95%;
    height: 100%;
    border-radius: 120% 120% 100% 100%;
  }

  .penguin-top {
    top: 10%;
    left: 25%;
    background: var(--penguin-skin, gray);
    width: 50%;
    height: 45%;
    border-radius: 70% 70% 60% 60%;
  }

  .penguin-bottom {
    top: 40%;
    left: 23.5%;
    background: var(--penguin-skin, gray);
    width: 53%;
    height: 45%;
    border-radius: 70% 70% 100% 100%;
  }

  .right-hand {
    top: 5%;
    left: 25%;
    background: var(--penguin-skin, black);
    width: 30%;
    height: 60%;
    border-radius: 30% 30% 120% 30%;
    transform: rotate(130deg);
    z-index: -1;
    animation-duration: 3s;
    animation-name: wave;
    animation-iteration-count: infinite;
    transform-origin:0% 0%;
    animation-timing-function: linear;
  }

  @keyframes wave {
      10% {
        transform: rotate(110deg);
      }
      20% {
        transform: rotate(130deg);
      }
      30% {
        transform: rotate(110deg);
      }
      40% {
        transform: rotate(130deg);
      }
    }

  .left-hand {
    top: 0%;
    left: 75%;
    background: var(--penguin-skin, gray);
    width: 30%;
    height: 60%;
    border-radius: 30% 30% 30% 120%;
    transform: rotate(-45deg);
    z-index: -1;
  }

  .right-feet {
    top: 85%;
    left: 60%;
    background: var(--penguin-beak, orange);
    width: 15%;
    height: 30%;
    border-radius: 50% 50% 50% 50%;
    transform: rotate(-80deg);
    z-index: -2222;
  }

  .left-feet {
    top: 85%;
    left: 25%;
    background: var(--penguin-beak, orange);
    width: 15%;
    height: 30%;
    border-radius: 50% 50% 50% 50%;
    transform: rotate(80deg);
    z-index: -2222;
  }

  .right-eye {
    top: 45%;
    left: 60%;
    background: black;
    width: 15%;
    height: 17%;
    border-radius: 50%;
  }

  .left-eye {
    top: 45%;
    left: 25%;
    background: black;
    width: 15%;
    height: 17%;
    border-radius: 50%;
  }

  .sparkle {
    top: 25%;
    left:-23%;
    background: white;
    width: 150%;
    height: 100%;
    border-radius: 50%;
  }

  .blush-right {
    top: 65%;
    left: 15%;
    background: pink;
    width: 15%;
    height: 10%;
    border-radius: 50%;
  }

  .blush-left {
    top: 65%;
    left: 70%;
    background: pink;
    width: 15%;
    height: 10%;
    border-radius: 50%;
  }

  .beak-top {
    top: 60%;
    left: 40%;
    background: var(--penguin-beak, orange);
    width: 20%;
    height: 10%;
    border-radius: 50%;
  }

  .beak-bottom {
    top: 65%;
    left: 42%;
    background: var(--penguin-beak, orange);
    width: 16%;
    height: 10%;
    border-radius: 50%;
  }

  body {
    background:#c6faf1;
  }

  .penguin * {
    position: absolute;
  }
</style>
<div class="penguin">
  <div class="penguin-bottom">
    <div class="right-hand"></div>
    <div class="left-hand"></div>
    <div class="right-feet"></div>
    <div class="left-feet"></div>
  </div>
  <div class="penguin-top">
    <div class="right-cheek"></div>
    <div class="left-cheek"></div>
    <div class="belly"></div>
    <div class="right-eye">
      <div class="sparkle"></div>
    </div>
    <div class="left-eye">
      <div class="sparkle"></div>
    </div>
    <div class="blush-right"></div>
    <div class="blush-left"></div>
    <div class="beak-top"></div>
    <div class="beak-bottom"></div>
  </div>
</div>
*/




/*         使用text-align屬性創建視覺平衡     */

/*


css中的text-align可以控制文本的對齊方式

text-align:justify 讓除了最後一行以外的文字兩端對齊即讓文字緊貼行的邊緣


text-align:center 文本置中對齊


text-align:right 文本靠右對齊


text-align:left 文本靠左對齊 （默認值）



<style>
  h4 {
    text-align:center;
  }
  p {
    text-align:justify;
  }
  .links {
    margin-right: 20px;

  }
  .fullCard {
    border: 1px solid #ccc;
    border-radius: 5px;
    margin: 10px 5px;
    padding: 4px;
  }
  .cardContent {
    padding: 10px;
  }
</style>
<div class="fullCard">
  <div class="cardContent">
    <div class="cardText">
      <h4>Google</h4>
      <p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at Stanford University.</p>
    </div>
    <div class="cardLinks">
      <a href="https://en.wikipedia.org/wiki/Larry_Page" target="_blank" class="links">Larry Page</a>
      <a href="https://en.wikipedia.org/wiki/Sergey_Brin" target="_blank" class="links">Sergey Brin</a>
    </div>
  </div>
</div>
*/



/*               使用width 屬性調整元素的寬度                        */

/*

img {
    width: 220px;
  }


可以使用CSS中的width屬性來指定元素的寬度，

數值可以是相對長度單位（如em）、絕對長度單位（如px）或其包含的父元素的百分比。


*/



/*                使用height 屬性調整元素的高度     */

/*

img {
  height: 20px;
}




*/




/* 使用strong 標籤讓文本變粗*/

/*

添加了strong標籤後 瀏覽器會自動給元素應用font-weight:bold;
  <p>Google was founded by Larry Page and Sergey Brin while they were
   Ph.D. students at <strong>Stanford University</strong>.</p>



*/





/*使用 u 標籤 給文本增加底線*/

/*

添加了u標籤後，瀏覽器會自動給元素應用text-decoration: underline;

盡量避免使用u標簽，因為它可能會被混淆為鏈接。錨標簽也有一個默認的底線格式。

*/


/*使用 em標籤使文本變斜體*/

/*
可以使用em標簽來強調文本。由於瀏覽器會自動給元素應用font-style: italic;，所以文本會顯示為斜體。

如下所示 段落p裡面會變斜體

  <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D.
   students</u> at <strong>Stanford University</strong>.</em></p>


*/

/*使用s Tag 給文本添加刪除線*/
/*

刪除線表示某段文字不再有效

<h4><s>Google </s>Alphabet</h4>

有了s 標籤  瀏覽器會對元素應用css text-decoration: line-through;

*/



/*                  使用hr標籤創造水平線   */

/*
            hr 是自關閉的標籤

             <h4><s>Google</s>Alphabet</h4>
          <hr>
      <p><em>Google was founded by Larry Page and Sergey Brin 
      while they were <u>Ph.D. students</u>
      at <strong>Stanford University</strong>.</em></p>

*/



/*                 調整文本背景色  */

/*
        可以為想要強調的文本的元素添加背景色
        這裡用rgba()取代rgb()


  rgba 代表：
  r = red 红色
  g = green 绿色
  b = blue 蓝色
  a = alpha 透明度

RGB 值可以在 0 到 255 之間。

alpha 值可以在 0 到 1 之間，其中 0 代表完全透明，1 代表完全不透明。

rgba()非常棒，因為你可以設定顏色的透明度，這意味著你可以做出一些很漂亮的半透明效果。

*/


/*                  調整標題與段落大小             */

/*

        標題（h1~h6）應該大於段落，除了可以更直觀看到網頁的佈局，

        同時能區分出不同元素的重要程度



  h4 {
    text-align: center;
    background-color: rgba(45, 45, 45, 0.1);
    padding: 10px;
    font-size:27px; //加了這行 把字放大而已
  }

*/


/*             給卡片元素增加box-shadow   */

/*

box-shadow 是給元素增加陰影


offset-x陰影的水平偏移量；
offset-y陰影的垂直偏移量;
blur-radius模糊距離；
spread-radius陰影尺寸；
顏色。

其中blur-raduis和spread-raduis是可選的。

語法如下：
  #thumbnail{
    box-shadow: 0px 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23) ;
  }

*/




/*               降低元素透明度         */


/*

值1不透明

值0.5半透明

值0 完全透明

給定的值會套用在整個元素 無論是圖片 還是 文本或背景色

 .links {
    text-align: left;
    color: black;
    opacity:0.7;

  }


*/


/*    使用text-transform屬性使文本成為大寫字母     */

/*


Value	             Result
lowercase	      "transform me"
uppercase     	"TRANSFORM ME"
capitalize    	"Transform Me"
initial	        使用默认值
inherit	        使用父元素的text-transform值。
none	           Default:不改变文字。

 h4 {
    text-align: center;
    background-color: rgba(45, 45, 45, 0.1);
    padding: 10px;
    font-size: 27px;
    text-transform:uppercase; //將文本變成大寫字母

  }

*/



/*     font-size用於指定元素中文本的大小 */
/*
font-size不只有限定用於h1~h6 標籤  只要包含text 都可以使用

<style>
h1{
    font-size:68px;
}

h2{
    font-size:52px;
}
h3{
    font-size:40px;
}
h4{
    font-size:32px;
}
h5{
    font-size:21px;
}
h6{
    font-size:14px;
}


</style>


*/





/*      font-weight 設置h1~h6 Tag的粗細    */
/*

<style>
  h1 {
    font-size: 68px;
    font-weight:800;
  }
  h2 {
    font-size: 52px;
    font-weight:600;
  }
  h3 {
    font-size: 40px;
    font-weight:500;
  }
  h4 {
    font-size: 32px;
    font-weight:400;
  }
  h5 {
    font-size: 21px;
    font-weight:300;
  }
  h6 {
    font-size: 14px;
    font-weight:200;
  }
</style>


*/





/*     段落的line-height     */
/*

  行高改變text中每行的高度，就是改變每行文字的垂直空間

<style>
  p {
    font-size: 16px;
    line-height:25px;
  }
</style>


*/






/*                  調整錨標籤的懸停狀態    */
/*

           這就是當游標滑到該標籤上 會變色

<style>
  a {
    color: #000;
  }

    a:hover{
    color: blue;
  }


</style>

*/




/*       改變元素相對位置    */

/*

 先了解何謂盒模型（Box-Model）
        
 盒模型的意思就是說在css中 html每個元素都可被視為一個盒子


 block box的特性 
 
 每個box會獨立成一行，並填滿該行的空間 寬度和高度可以透過修改padding 和 margin達成

  其他元素會從下一行開始（就是不能跟block box 特性的並排）
 
 像是<h1>類型的標籤 、 <div> 、 <p>


 inline box 的特性
 
 box會自動排成一列 且無法調整高度 只有寬度 padding 、margin 達成

 具備inline box特性的有 <a>、<span>、<em>、<strong> 、<img>

 元素默認這種佈局方式 稱為 normal flow（普通流）

 但是css 提供 position的方式去覆寫


  當元素被設為相對位置 他允許指定css在normal flow 中的當前位置移動他

  css 控制各個方向的偏移量相對應的屬性是 left 、 right 、 top 、bottom

  他代表原來位置相對應方向偏移指定的像素 、百分比、、ems

  語法如下：

  p {
  position: relative;
  bottom: 10px;   //其實會向上移動10px
  }

而且要記得相對定位雖然偏移了 但他實際上還是在他原本的位置
也不會對其他元素的位置造成任何影響

*/



/*            使用css偏移移動相對定位的元素      */

/*
  top right left bottom 定義元素在相應方向的偏移距離

  元素將從當前位置 相反方向偏移

像是top 使h2向下移動 left 使元素向右移動




*/


/*                       絕對定位       */

/*
第一個特性

與相對位置不一樣的地方在於 絕對定位會將元素從資料中抽掉  因此周圍的項目會忽略他

絕對定位的物件會在他原本所在的位置


當 元素設定成絕對定位 然後設left:0;top:0;時 他會往上去找父層的位置

如果往上都沒有其他元素有設定 就會定在視窗上（youtube金魚影片 absolute）

不是定在body上 如果要定上body上 body也要給定位（通常默認值是relative)

另外fix 是永遠固定  絕對定位只固定一次 如果我定在左下 網頁又很長就會捲走


第二個特性：

如果我把元素的position設定為絕對定位 他就會往父層找有沒有fix relative absolute 

如果有fix relative absolute  絕對定位的那個元素就會定在他們身上


例如 div class c的父層是div  class b

然後div  class b是設relative   div class c 設left:0; bottom:0; 

那 div class c的位置就會在div class b 的left:0;bottom:0;

若 class b 的父層 class A也有定位  但是class c吃到的是class b的 他就不會再往上找了

反正就是會class c 往父層找有沒有定位 如果沒有就往父父層找 類推....


絕對位置 常用在蓋板廣告那個叉叉的位置



*/




/*                                    fixed 固定定位      */
/*

定位就是在畫面中我要依據誰做對齊或者是依據誰做位置的排列

使用position:fixed 定位後 他就像ps的圖層一樣自己獨立一層

如果沒有設定fixed的上下左右 他會停留在原位連捲動畫面也是（永遠固定在視窗上）



最常看到的就是蓋板廣告 還有導覽列 BackToTop 選單 頁尾


關於navbar製作的部分 可以參考金魚第14天15:06左右的影片片段


fixed 和 absolute的差別就是 fixed不會隨著畫面滾動而滾動

fixed也是絕對定位的一種 也會將元素從normal flow移除
*/




/*            float            */

/*

float 不是真的使用position  而是設置元素的浮動屬性

float的元素不在normal flow 中他向左或向右浮動直到邊框碰到框或另一個浮動框的邊框

通常用width屬性來指定浮動元素佔據的水平空間



*/




/*  使用z-index屬性改變重疊元素的位置   */

/*
當一些元素重疊時，在html中後出現的元素會顯示在先出現的元素前面 

z-index可以指定元素出現的順序
z-index取整數值 數值大的會比數值小的前面

<style>
  div {
    width: 60%;
    height: 200px;
    margin-top: 20px;
  }

  .first {
    background-color: red;      紅的在藍的前面
    position: absolute;
    z-index:2;

  }
  .second {
    background-color: blue;
    position: absolute;
    left: 40px;
    top: 50px;
    z-index: 1;
  }
</style>

<div class="first"></div>
<div class="second"></div>

*/




/*                使用margin 使元素水平置中       */

/*

另一種位置技術是將display為block的元素水平置中

常見的方式是將block元素的margin:auto;

這也對圖片有用 雖然圖片默認是in-line

但可以透過display:block將圖片變塊級元素

語法如下：

<style>
  div {
    background-color: blue;
    height: 100px;
    width: 100px;
    margin:auto; 水平置中
  }
</style>
<div></div>


*/



/*        使用hsl()調整顏色的色調     */

/*
      hsl()使css調色更方便

    
      hsl的 h 指的是hue(色相)是色彩的基本属性，就是平常所说的颜色名称，如红色、黄色等
      
      hsl 的s l 代表飽和度 和亮度

      Saturation(飽和度)是指灰色的佔比

     一個完全飽和的顏色中沒有灰色，而一個最低飽和度的顏色幾乎完全是灰色。

      Lightness（亮度）是指白色和黑色的佔比

      給出的百分比範圍從0%（黑色）到100%（白色），其中50%是正常顏色。





*/




/*            css線性漸變         */

/*

HTML背景色不限定只能用單色當背景

css提供了漸變 可以透過background:linear-gradient()

範例如下：

background: linear-gradient(90deg, red, yellow, rgb(204, 204, 255));

第一個參數是顏色漸層的方向 90度代表 垂直漸層 45度跟反斜線方向差不多


*/





/*       使用css線性漸變來創造條紋屬性    */
/*


repeating-linear-gradient 跟linear-gradient很像

只是 repeating-linear-gradient 重複指定漸層

下面  background:repeating-linear-gradient

0px [黄色 -- 过渡 -- 蓝色] 40px [绿色 -- 过渡 -- 红色] 80px

若 每隊漸變值都一樣就會變成條紋

  <style>

  div{ 
    border-radius: 20px;
    width: 70%;
    height: 400px;
    margin:  50 auto;
    background: repeating-linear-gradient(
      90deg,
      yellow 0px,
      blue 40px,
      green 40px,
      red 80px
    );
  }

  </style>

  <div></div>

  

*/


/*          通過添加細微圖案作為背景圖像來創造紋理                    */

/*
          background屬性支持url()通過連結的方式引入指定的紋理或圖片

          <style>
            body {
            background:url( https://cdn-media-1.freecodecamp.org/imgr/MJAkxbh.png);
                 }
          </style>


*/



/*                使用css Transform scale 屬性可以更改元素的大小    */
/*
                 transform:scale()可以用來改變元素的顯示比例

                 下面的例子把段落元素放大兩倍

                 p {
                    transform:scale(2);
                   }



*/




/*                使用css Transform scale 屬性在懸停時縮放元素  */
/*


<style>
  div {
    width: 70%;
    height: 100px;
    margin:  50px auto;
    background: linear-gradient(
      53deg,
      #ccfffc,
      #ffcccf
    );
  }
  div:hover{
    transform:scale(1.1);  //當滑鼠在div上時會放大元素
  }


</style>

<div></div>


*/


/*            使用css Transform skewＸ     沿著x軸傾斜元素                  */

/*


<style>
  div {
    width: 70%;
    height: 100px;
    margin:  50px auto;
  }
  #top {
    background-color: red;
  }
  #bottom {
    background-color: blue;
    transform:skewX(24deg);
  }
</style>

<div id="top"></div>
<div id="bottom"></div>


*/



/*   使用css Transform skewY     沿著Y軸傾斜元素          */
/*

<style>
  div {
    width: 70%;
    height: 100px;
    margin: 50px auto;
  }
  #top {
    background-color: red;
    transform:skewY(-10deg);       //這裏
  }
  #bottom {
    background-color: blue;
    transform: skewX(24deg);
  }
</style>

<div id="top"></div>
<div id="bottom"></div>
*/


/*    了解css關鍵幀和動畫是如何運作的    */
/*

要給元素添加動畫 要了解animation 和@keyframes規則

animation 控制動畫的外觀

keyframe規則控制動畫中各階段的變化

animation-name 設置動畫的名稱 也就是綁定@keyframe的名稱

animation-duration 設置動畫所花費的時間




範例如下：

<style>
  div {
    height: 40px;
    width: 70%;
    background: black;
    margin: 50px auto;
    border-radius: 5px;
  }

  #rect {
animation-name:rainbow;
animation-duration:4s;
  }

@keyframes rainbow
{
  0%{                       //這裡可以改成from 意思一樣
    background-color:blue;
  }
  50%
  {
    background-color:green;
  }
  100%{                     //這裡可以改成to    意思一樣
    background-color:yellow;
  }
}


</style>
<div id="rect"></div>

*/


/*              使用css動畫更改按鈕的懸停狀態                   */

/*

<style>
  button {
    border-radius: 5px;
    color: white;
    background-color: #0F5897;
    padding: 5px 10px 8px 10px;
  }

  button:hover {
    animation-name: background-color;
    animation-duration: 500ms;           //記得1000ms = 1s
  }
  @keyframes background-color{
      100%{
        background-color: #4791d0;
      }
 
    }
  

</style>

<button>Register</button>



*/


/*            修改動畫的填充方式        */
/*

上面的例子 會在滑鼠移動到按鈕上時變色 但500ms後會重置

若要讓按鈕一直維持變色的狀態 可以使用animation-fill-mode: forwards;


範例如下：

<style>
  button {
    border-radius: 5px;
    color: white;
    background-color: #0F5897;
    padding: 5px 10px 8px 10px;
  }
  button:hover {
    animation-name: background-color;
    animation-duration: 500ms;

    animation-fill-mode:forwards;     //當滑鼠移動到button上時，讓button始終維持變色

  }
  @keyframes background-color {
    100% {
      background-color: #4791d0;
    }
  }
</style>
<button>Register</button>




*/